<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DataBuffers</name>
    </assembly>
    <members>
        <member name="T:DataBuffers.CircularBuffer`1">
            <summary>
            This structure contains a non-thread safe circular buffer
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:DataBuffers.IBufferExtensions">
            <summary>
            Various extension methods for an IBuffer
            </summary>
        </member>
        <member name="M:DataBuffers.IBufferExtensions.ToList``1(DataBuffers.IBuffer{``0})">
            <summary>
            Copies every element in the IBuffer to the list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.IBufferExtensions.Fill``1(DataBuffers.IBuffer{``0},System.Collections.Generic.List{``0})">
            <summary>
            Fills the buffer with all the elements in the array
            </summary>
            <param name="buffer"></param>
            <param name="elements"></param>
        </member>
        <member name="T:DataBuffers.IBuffer`1">
            <summary>
            The generic interface for a buffer object
            </summary>
            <typeparam name="T">The datatype being stored</typeparam>
        </member>
        <member name="P:DataBuffers.IBuffer`1.Size">
            <summary>
            Gets and sets the size of the buffer
            </summary>
        </member>
        <member name="M:DataBuffers.IBuffer`1.Add(`0)">
            <summary>
            Adds to the buffer
            </summary>
            <param name="toAdd"></param>
        </member>
        <member name="M:DataBuffers.IBuffer`1.GetNextItem(DataBuffers.IUniqueReader)">
            <summary>
            Gets the next item for the reader
            </summary>
            <param name="reader"></param>
            <returns>The read item</returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.TryGetNextItem(DataBuffers.IUniqueReader,`0@)">
            <summary>
            Gets the next item if available, if not returns false
            </summary>
            <param name="reader"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.TryPeakItem(DataBuffers.IUniqueReader,`0@)">
            <summary>
            peaks the item if it exists or if not returns false
            </summary>
            <param name="reader">The reader to act upon</param>
            <param name="data"></param>
            <returns>If data was set</returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.IterateToCurrentElement(DataBuffers.IUniqueReader,System.Int32)">
            <summary>
            iterates from the current reader position to the most recent inserted item (at that time)
            Iterates until all the data has been read or max has been reached. 
            </summary>
            <param name="reader">reader to act upon</param>
            <param name="max">max number of elements read</param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.GetNewReaderIdentifier(DataBuffers.IReaderOptions)">
            <summary>
            Creates a new reader
            </summary>
            <param name="options">Where the reader should start</param>
            <returns>The reader</returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.GetNewReaderIdentifier(DataBuffers.IUniqueReader)">
            <summary>
            Copies a reader and it's indexes
            </summary>
            <param name="copy">The reader to copy the position of</param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.IterateFromCurrentBackwards(System.Int32,System.Boolean)">
            <summary>
            Iterates from the most recent element backwards
            </summary>
            <param name="max">the maximum amount of elements read</param>
            <param name="receivingMessages">If the datastructure will be receiving messages</param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.IBuffer`1.RemoveReader(DataBuffers.IUniqueReader)">
            <summary>
            Remove a reader from the internal list of readers
            </summary>
            <param name="toDelete"></param>
        </member>
        <member name="T:DataBuffers.IReaderOptions">
            <summary>
            Indicates various options when a new reader is being made
            </summary>
        </member>
        <member name="F:DataBuffers.IReaderOptions.LastInserted">
            <summary>
            Starts reading at the last inserted item
            </summary>
        </member>
        <member name="F:DataBuffers.IReaderOptions.LastAvailable">
            <summary>
            Starts reading at the last available item
            </summary>
        </member>
        <member name="T:DataBuffers.IUniqueReader">
            <summary>
            This is going to be highly unique to the datastruct, so lets just make it all
            one interface to give goodfeedback on what the item does. These, of course, cannot 
            be passed from one datastructure to another
            </summary>
        </member>
        <member name="T:DataBuffers.SequentialCircularBuffer`1">
            <summary>
            A class providing a way to insert a TItem to a data queue
            and later pop it out. Enfources that no data object will not be overriden
            until it has been read by every UniqueReader created
            </summary>
            <remarks>
            This class will be optimized towards making an Add as efficient as possible. Second to this is
            making an itteration to the current element. 
            If reading is not kept current, the size used for the class will expanding. When expanding, all
            reads are temperarily blocked if called, but writes continue (unless there are unlikely circumstances). Expanding can also be called explicitly. 
            The class can only expand in descrete increments of rings, set at construction.
            
            Creating and removing IUniqueReaders(Indexes) is currently not a thread-safe procedure
            </remarks>
            <typeparam name="TItem">The item stored in the buffer</typeparam>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.RingSize">
            <summary>
            Stores the size each ring is set to
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.chain">
            <summary>
            Collection of every ring that data is stored in
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.readingIndexes">
            <summary>
            Stores the amount of readers we have right now
            </summary>
            <remarks>
            Lock this to 
            </remarks>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.IncrementingChain">
            <summary>
            Contains the task that is resizing the chain
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.LowestReadingRing">
            <summary>
            the lowest current IUniqueReader number or int max if there are not readers
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.HighestInsertedRing">
            <summary>
            The current lowest ring number for the last inserted ring
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.bufferRingCount">
            <summary>
            The number of rings the writer has to be before a reader before it
            spawns a new ring
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.RingGrowthIncrement">
            <summary>
            The number of rings to grow at a time
            </summary>
        </member>
        <member name="P:DataBuffers.SequentialCircularBuffer`1.Size">
            <summary>
            Returns the size of the data structure
            Setting this pauses all additions to the data structure
            </summary>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Makes a SequentialCircularBuffer
            </summary>
            <param name="initialSize">The initial amount of items that the buffer should store</param>
            <param name="ringSize">The number of each items each ring can store</param>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.Add(`0)">
            <summary>
            Adds a item to the buffer
            </summary>
            <param name="toAdd">The item to add</param>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.GetNextItem(DataBuffers.IUniqueReader)">
            <summary>
            Gets the next item, and spins if there is no new item available
            </summary>
            <param name="reader">The reader this is acting upon</param>
            <returns>The next item</returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.TryGetNextItem(DataBuffers.IUniqueReader,`0@)">
            <summary>
            Tries to get the next item available, if it exists.
            </summary>
            <param name="reader">The reader to act upon</param>
            <param name="data">The data returned, if any</param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.IterateToCurrentElement(DataBuffers.IUniqueReader,System.Int32)">
            <summary>
            Iterates over every available element, until the last new one is read
            </summary>
            <param name="reader">The reader this is reading for</param>
            <param name="max">The maximum elements that are going to be read. Has to be smaller then ringSize - 1</param>
            <returns>An enumerable of items to read</returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.IterateFromCurrentBackwards(System.Int32,System.Boolean)">
            <summary>
            Iterates from the current message to the last available one
            </summary>
            <param name="max">The maximum abount of messages you want to receive</param>
            <param name="receivingMessages">If any messages are going to be ariving</param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.IterateFromReaderBackwards(System.Int32,DataBuffers.IUniqueReader,System.Boolean)">
            <summary>
            Iterates from start from to the last message available
            This is updates StartFrom until it points to the last available reader
            Also not thread safe if StartFrom is updated outside this function
            </summary>
            <param name="max">the maximum amount of messages to receive</param>
            <param name="StartFrom">the reader to start from</param>
            <param name="receivingMessages">
            if the data structure is receiving messages
            this allows for me to return messages to you that usually cannot be guarenteed to not 
            be overriden
            </param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.TryPeakItem(DataBuffers.IUniqueReader,`0@)">
            <summary>
            Peaks an item and sets it if the item exists
            otherwise returns false
            </summary>
            <param name="reader">the reader to act upon</param>
            <param name="data">the variable to set with the data</param>
            <returns>If data was set</returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.UnsafeDecrement(DataBuffers.SequentialCircularBuffer{`0}.Index)">
            <summary>
            A non-thread safe decrement
            </summary>
            <param name="toDecrement">The index to decrement</param>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.IncrementIndex(DataBuffers.SequentialCircularBuffer{`0}.Index,System.Action)">
            <summary>
            Increments the index to the next available slot
            </summary>
            <param name="toIncrement"></param>
            <param name="chainSafeAction">An action to do while under the chain lock when incremented</param>
            <returns>If the ring was updated</returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.GetNewReaderIdentifier(DataBuffers.IReaderOptions)">
            <summary>
            Returns a new identifier for a new reader
            </summary>
            <remarks>
            Getting the last data available reader is extemely costly and should be avoided when possible
            </remarks>
            <param name="options"></param>
            <returns>The unique reader</returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.GetNewReaderIdentifier(DataBuffers.IUniqueReader)">
            <summary>
            Copies a reader
            </summary>
            <param name="copy"></param>
            <returns></returns>
        </member>
        <member name="M:DataBuffers.SequentialCircularBuffer`1.RemoveReader(DataBuffers.IUniqueReader)">
            <summary>
            Removes a reader from what's being tracked
            </summary>
            <param name="toDelete"></param>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.Index._currentMessageIndex">
            <summary>
            This gives a way of telling where we are in all the messages sent
            without locking to get the indexes
            </summary>
            <remarks>
            All operations upon this must be using interlocked
            </remarks>
        </member>
        <member name="P:DataBuffers.SequentialCircularBuffer`1.Index.CurrentMessageIndex">
            <summary>
            This is the unique message ID for easy telling where we are
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.Index.IndexLock">
            <summary>
            This stores the lock on the general index
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.Index.CurrentRingIndex">
            <summary>
            The current index into the ring
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.Index.ringCount">
            <summary>
            The number of times this has updated to a new ring
            </summary>
        </member>
        <member name="F:DataBuffers.SequentialCircularBuffer`1.Index.currentRing">
            <summary>
            A reference to the current ring
            This is so we don't have to block as much when inserting a new ring
            </summary>
        </member>
        <member name="T:SequentialCircularBuffers.Ring`1">
            <summary>
            A loose rapper around array
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
    </members>
</doc>
